"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = require("react");
const use_immer_1 = require("use-immer");
function useOptimisticReducer(reducer, initializerArg) {
    const [awaited, setAwaited] = react_1.useState({ key: null });
    const [scheduler, setScheduler] = use_immer_1.useImmer({});
    const [state, dispatch] = react_1.useReducer(reducer, initializerArg);
    react_1.useEffect(() => {
        (async () => {
            for (const key in scheduler) {
                const optimistic = scheduler[key];
                // If queue is waiting to be called
                if (!optimistic.isCompleted && !optimistic.isFetching) {
                    // Start fetching
                    setScheduler((draft) => {
                        draft[key].isFetching = true;
                    });
                    try {
                        await optimistic.queue[0].callback();
                        setAwaited({ key });
                    }
                    catch (e) {
                        // Retrieve previous state
                        const { prevState } = scheduler[key];
                        // Execute fallback if provided
                        const { fallback } = scheduler[key].queue[0];
                        if (typeof fallback !== 'undefined') {
                            fallback(prevState);
                        }
                        // Reset scheduler
                        setScheduler((draft) => {
                            draft[key] = {
                                queue: [],
                                isFetching: false,
                                isCompleted: true,
                                prevState: {},
                            };
                        });
                    }
                }
            }
        })();
    }, [scheduler]);
    react_1.useEffect(() => {
        if (awaited.key) {
            nextSchedule(awaited.key);
        }
    }, [awaited]);
    const nextSchedule = react_1.useCallback((key) => {
        const nextQueue = scheduler[key].queue.slice(1);
        setScheduler((draft) => {
            draft[key].queue = nextQueue;
            draft[key].isFetching = false;
            draft[key].isCompleted = !nextQueue.length;
        });
    }, [scheduler]);
    function customDispatch(action) {
        var _a;
        // Extract the optimistic property from a cloned action
        const clonedAction = Object.assign({}, action);
        delete clonedAction.optimistic;
        // Update the UI without sending the optimistic property
        dispatch(clonedAction);
        // If action is dispatched optimistically
        const optimistic = action.optimistic;
        if (typeof optimistic === 'object') {
            /**
             * If a specific queue is included within the optimistic object,
             * the actions will be executed in a separate queue.
             * If no queue is specified, the action type will be used by default.
             */
            const key = (_a = optimistic.queue) !== null && _a !== void 0 ? _a : action.type;
            // Schedule callback
            if (key in scheduler) {
                // Append action into the existing queue
                setScheduler((draft) => {
                    draft[key].queue.push(optimistic);
                    draft[key].isCompleted = false;
                    draft[key].prevState = state;
                });
            }
            else {
                // Add action to a new queue
                setScheduler((draft) => {
                    draft[key] = {
                        queue: [optimistic],
                        isFetching: false,
                        isCompleted: false,
                        prevState: state,
                    };
                });
            }
        }
    }
    return [state, customDispatch];
}
exports.default = useOptimisticReducer;
